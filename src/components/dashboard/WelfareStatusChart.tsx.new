import React, { useEffect, useState, useCallback } from 'react';
import { format } from 'date-fns';
import { th } from 'date-fns/locale';
import { RefreshCw, Eye } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { supabase } from '@/integrations/supabase/client';

// Interface for welfare requests from database
interface WelfareRequestItem {
  id: number;
  employee_id: number;
  employee_name: string;
  request_type: string;
  status: string;
  amount: number;
  created_at: string;
  details?: string;
  title?: string;
  manager_notes?: string;
  attachment_url?: string;
}

const formatDate = (dateString: string | Date) => {
  try {
    const date = new Date(dateString);
    return format(date, 'dd MMM yyyy', { locale: th });
  } catch (error) {
    return 'Invalid date';
  }
};

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB',
    minimumFractionDigits: 2,
  }).format(amount);
};

const getStatusText = (status: string) => {
  if (!status) return 'Pending';
  switch (status.toLowerCase()) {
    case 'approved': return 'Approved';
    case 'rejected': return 'Rejected';
    default: return 'Pending';
  }
};

const getStatusClass = (status: string) => {
  if (!status) return 'bg-gray-100 text-gray-800';
  switch (status.toLowerCase()) {
    case 'approved':
      return 'bg-green-100 text-green-800';
    case 'pending':
      return 'bg-yellow-100 text-yellow-800';
    case 'rejected':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const WelfareStatusChart: React.FC = () => {
  const [requests, setRequests] = useState<WelfareRequestItem[]>([]);
  const [filteredRequests, setFilteredRequests] = useState<WelfareRequestItem[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedStatus, setSelectedStatus] = useState<string>('all');

  // Fetch requests from Supabase
  const fetchRequests = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      console.log('Fetching welfare requests...');
      
      const { data, error: fetchError } = await supabase
        .from('welfare_requests')
        .select('*')
        .order('created_at', { ascending: false });

      if (fetchError) {
        console.error('Error fetching welfare requests:', fetchError);
        throw new Error('Failed to load welfare requests');
      }

      console.log('Fetched requests:', data);
      setRequests(data || []);
    } catch (err: any) {
      console.error('Failed to fetch requests:', err);
      setError(err.message || 'Failed to load data. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Initial fetch
  useEffect(() => {
    fetchRequests();
  }, [fetchRequests]);

  // Filter requests based on status and search term
  useEffect(() => {
    if (!requests.length) {
      setFilteredRequests([]);
      return;
    }
    
    let result = [...requests];
    
    // Apply status filter
    if (selectedStatus !== 'all') {
      result = result.filter(request => 
        request.status?.toLowerCase() === selectedStatus.toLowerCase()
      );
    }
    
    // Apply search filter
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      result = result.filter(request => 
        (request.employee_name && request.employee_name.toLowerCase().includes(term)) ||
        (request.request_type && request.request_type.toLowerCase().includes(term)) ||
        (request.details && request.details.toLowerCase().includes(term))
      );
    }
    
    setFilteredRequests(result);
  }, [requests, selectedStatus, searchTerm]);

  const handleViewDetails = (request: WelfareRequestItem) => {
    alert(`Request Details\n\n` +
          `Employee: ${request.employee_name || 'N/A'}\n` +
          `Type: ${request.request_type || 'N/A'}\n` +
          `Amount: ${formatCurrency(request.amount || 0)}\n` +
          `Status: ${getStatusText(request.status)}\n` +
          `Details: ${request.details || 'No details'}\n` +
          `Date: ${formatDate(request.created_at)}\n` +
          `Manager Notes: ${request.manager_notes || '-'}`);
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <div>
            <CardTitle>Welfare Request History</CardTitle>
            <CardDescription>View and manage all welfare requests</CardDescription>
          </div>
          <div className="flex flex-col sm:flex-row gap-2">
            <input
              type="text"
              placeholder="Search..."
              className="px-3 py-2 border rounded-md text-sm w-full sm:w-64"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <select
              className="px-3 py-2 border rounded-md text-sm w-full sm:w-auto"
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
            >
              <option value="all">All Statuses</option>
              <option value="pending">Pending</option>
              <option value="approved">Approved</option>
              <option value="rejected">Rejected</option>
            </select>
            <Button 
              onClick={fetchRequests} 
              variant="outline" 
              size="sm" 
              className="flex items-center gap-2"
              disabled={isLoading}
            >
              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
              {isLoading ? 'Loading...' : 'Refresh'}
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex flex-col items-center justify-center p-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-2"></div>
            <p className="text-gray-600">Loading data...</p>
          </div>
        ) : error ? (
          <div className="flex flex-col items-center justify-center p-4 text-center text-red-600 bg-red-50 rounded-lg">
            <p className="font-medium">Error</p>
            <p className="text-sm mb-2">{error}</p>
            <Button
              onClick={fetchRequests}
              variant="default"
              size="sm"
            >
              Retry
            </Button>
          </div>
        ) : filteredRequests.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            No requests found
          </div>
        ) : (
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Employee</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredRequests.map((request) => (
                  <TableRow key={request.id}>
                    <TableCell className="font-medium">
                      {request.employee_name || 'N/A'}
                    </TableCell>
                    <TableCell>{request.request_type || 'N/A'}</TableCell>
                    <TableCell>{formatCurrency(request.amount || 0)}</TableCell>
                    <TableCell>
                      <span className={`px-2 py-1 rounded-full text-xs ${getStatusClass(request.status)}`}>
                        {getStatusText(request.status)}
                      </span>
                    </TableCell>
                    <TableCell>{formatDate(request.created_at)}</TableCell>
                    <TableCell className="text-right">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleViewDetails(request)}
                      >
                        <Eye className="h-4 w-4 mr-1" /> View
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default WelfareStatusChart;
